row = db.inscription
for r in row:
  print db.inscription.auth_user
inscripciones = row.select()
rows = db.auth_user
rows
users = rows.select()
rows = db(users)
users
users = db(rows)
registros = users.select()
for registro in registros:
  print registro.username
format
format users
for registro in registros:
 print registro
inscriptions = db.inscription.select()
inscriptions = db(inscription).select()
inscriptions = db(db.inscription).select()
for insc in inscriptions :
  insc.auth_user.username
exit()
db(auth_user == db.inscription.auth_user).select()
db(db.auth_user).select()
inscriptions = db(db.auth_user.id == db.inscription.auth_user).select()
print inscriptions
for inscription in inscriptions:
  print inscription
for inscription in inscriptions:
  print inscription.auth_user.last_name
inscriptions_heightexams = db((db.auth_user.id == db.inscription.auth_user) & (db.height.inscription == db.inscription.id)).select()
for ih in inscriptions_heightexams:
  print ih
for ih in inscriptions_heightexams:
[A
for ih in inscriptions_heightexams:
  print ih.inscription.auth_user.gender
exit()
from gluon.contrib.populate import populate
populate(db.post, 100)
exit
exit()
posts = db(db.post.category.id == request.args(0)).select()
exit()
posts = db(db.post.category.id == 1).select()
posts = db(db.post.category == 1).select()
posts = db(db.post.post_category.id == 1).select()
posts = db(db.post.category.id == 1).select()
exit()
    shifts = db(db.shift).select(orderby=db.shift.shift_date)
shifts = db(db.shift).select()
print shifts
shifts = db(db.shift).select(orderby = db.shift.shift_date)
print shifts
for i in range(len(shifts)):
print shifts[i]
for i in range(len(shifts)):
  print shifts[i]
  print shifts[2]
  print shifts.id
  print shifts.id['1']
  print shifts
exit
exit()
shifts = db(db.shift).select(orderby = db.shift.shift_date)
shifts
shifts.count()
i = shifts.count()
i = len(shifts)
i
for i in range(len(shifts)):
  print shifts[i]
  print shifts[i+1]
shifts_candidate = db(shift_candidate).select()
shifts_candidate = db(db.shift_candidate).select()
shifts_candidate
print shifts_candidate
print shifts_candidate.shift.shift_date
for s in shifts_candidate:
  print s.shift.shift_date
shifts
for i in range(len(shifts)):
  sc1 = db(db.shift_candidate.shift.shift_date==shifts[i])
for i in range(len(shifts)):
  sc1 = db(db.shift_candidate.shift.shift_date==shifts[i]).select()
  print sc1
  sc1 = db(db.shift_candidate.shift.shift_date==shifts[i].shift_date).select()
for i in range(len(shifts)):
  sc1 = db(db.shift_candidate.shift.shift_date==shifts[i].shift_date).select()
  print sc1
sc1 = db(db.shift_candidate).select()
sc1
print sc1
for s in sc1:
for s in sc1:
  print s.auth_user.first_name
for i in range(len(shifts)):
  sc1 = db(db.shift_candidate.shift_id == shifts[i].id).select()
  print sc1
for i in range(len(shifts)):
  sc1 = db(db.shift_candidate.shift == shifts[i].id).select()
  print sc1
for i in range(len(shifts)):
  sc1 = db(db.shift_candidate.shift == shifts[i].id).select()
  sc2 = db(db.shift_candidate.shift == shifts[i+1].id).select()
  print sc1
  print sc2
  sc2 = db(db.shift_candidate.shift == shifts[i+1].id).select()
exit()
db(db.shift).select(orderby = db.shift.shift_date).first
shift = db(db.shift).select(orderby = db.shift.shift_date).first
shift
print shift
shift.count()
shift.shift.count()
dir(shift)
shift.__sizeof__
shift.__sizeof__()
dir(shift.shift)
exit
exit()
shifts = db(db.shift).select(orderby = db.shift.shift_date)
for shift in shifts:
print shift.shift_date
for shift in shifts:
  print shift.shift.shift_date
for shift in shifts:
  print shift.shift_date
for shift in shifts:
  print shift.first_name
shift_candidate1 = shifts.first()
shift_candidate1 = shifts[0]
print shift_candidate1
len(shift_candidate1)
len(shifts)
shift_candidate
shift_candidate1
shift_candidate1 = shifts[0].shift
shifts[0].shift
shifts[0]
shift_candidate1 = db(db.shift_candidate.shift == shift[0].id).select()
shift_candidate1 = db(db.shift_candidate.shift == shifts[0].id).select()
len (shift_candidate1)
for shift in shifts:
  len(shift)
  len(shift[0])
for shift in shifts:
  shift.count()
shift = shifts[0]
shift
len shift
len(shift)
len shift.shift
len (shift.shift)
shift_candidate1 = db(db.shift_candidate.shift == shifts[0].id).select()
len (shift_candidate1)
exit()
shift_candidate1 = db(db.shift_candidate.shift == shifts[0].id).select()
    shift_candidate1 = db(db.shift_candidate.shift == shifts[0].id).select()
    shifts = db(db.shift).select(orderby = db.shift.shift_date)
shifts = db(db.shift).select(orderby = db.shift.shift_date)
shift_candidate1 = db(db.shift_candidate.shift == shifts[0].id).select()
shift_candidate1
shift_candidate1[0].id
shift_candidate1.shift.id
shift_candidate1
print shift_candidate1
shift_candidate1.shift
shift_candidate1.shift.id
shifts
print shifts
print shift_candidate1
shift_candidate1.shift_candidate
shift_candidate['shift']
shift_candidate1['shift']
print shift_candidate1['shift']
len shifts
len (shifts)
exit()
i = 8
j = 5
s_time = `i`+":"+`j`
shift_date = 2017-12-25
print shift_date
shift_date = "2017-12-25"
print shift_date
db.shift.insert(shift_date = shift_date, shift_time = s_time)
save()
db.save()
db.shift.insert(shift_date = shift_date, shift_time = s_time)
db = DAL('sqlite://storage.sqlite')
db.shift.insert(shift_date = shift_date, shift_time = s_time)
exit()
i = 8
j = 5
shift_date = "2017-12-25"
shift_time = `i`+":"+`j`
print shift_time
db.shift.insert(shift_date = shift_date, shift_time = shift_time)
exit()
i = 8
j = 5
shift_time = `i`+":"+`j`
db.shift.insert(shift_date = shift_date, shift_time = shift_time)
shift_date = "2017-12-25"
db.shift.insert(shift_date = shift_date, shift_time = shift_time)
dir(db)
db.shift.update
db.update()
exit()
turnosAsignados = db(db.shift_candidate).select()
print turnosAsignados
turnosAsignados = db(db.shift_candidate.shift.shift_date == 2017-12-25).select()
print turnosAsignados.shift.shift_date
for turnos in turnosAsignados:
  print turnos.shift.shift_date
select turnos db(db.shift.shift_date == 2017-12-25).select()
select turnos db(db.shift.shift_date == "2017-12-25").select()
import date
from date import date
import datetime
shift = "2017-12-25"
shift_date = datetime.datetime.strptime(shift, '%Y-%m-%d').date()
print shift_date
type shift_date
type(shift_date)
clear
clear()
cls
turnos = db(db.shift.shift_date == shift_date).select()
print turnos
turnos = db(db.shift.shift_date == shift_date).select(orderby=db.shift.shift_time)
print turnos
turnos_asignados = db(db.shift_candidate.shift == turnos.id).select()
turnos = db(db.shift_candidate.shift.shift_date == shift_date).select()
turnos
print turnos
type(turnos)
dir(turnos)
turnos_asignados = db(db.shift_candidate.shift == turnos ).select()
turnos_asignados = db(db.shift_candidate.shift == turnos.id ).select()
turnos_asignados = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == shift_candidate.auth_user ).select()
print
turnos_asignados = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == shift_candidate.auth_user)).select()
turnos_asignados = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == db.shift_candidate.auth_user)).select()
for registro in turnos_asignados:
  print registro.shift.shift_date
  print registro.shift.shift_time
  print registro.auth_user.first_name
turnos_asignados = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == db.shift_candidate.auth_user)).select(orderby=db.shift.shift_date)
for registro in turnos_asignados:
  print registro.shift.shift_date
  print registro.shift.shift_time
  print registro.auth_user.first_name
  print registro.auth_user.last_name
exit()
turnos_asignados = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == db.shift_candidate.auth_user)).select(orderby=db.shift.shift_date)
for registro in turnos_asignados:
  print registro.shift.shift_date
  print registro.shift.shift_time
  print registro.auth_user.last_name
  print registro.auth_user.first_name
exit()
db.inscriptions.truncate
db.inscription.truncate
inscripciones = db.inscription.select()
inscripciones = db(db.inscription).select()
print inscripciones
db.inscription.truncate()
db.inscription.truncate('RESTART IDENTITY CASCADE')
db.inscription.truncate()
db.shift_candidate.truncate()
db.inscription.truncate
db.inscription.truncate()
clear
exit()
db.inscription.truncate()
db.height.truncate()
db.intellectual_exam.truncate()
db.physical_exam.truncate()
db.groupal_psychological_examination.truncate()
db.psychological_interview.truncate()
db.inscription.truncate()
db.commit()
exit()
cand = db(db.auth_user.username == 13001001).select().first())
candidate = db(db.auth_user.username == request.args(0)).select().first()
candidate.username
candidate
print candidate
candidate = db(db.auth_user.username == 13001001).select().first()
candidate
candidate.last_name
inscription = db(db.shift_candidate.auth_user == candidate.id).select().last()
inscription
candidate.id
print candidate.id
exit
exit()
inscriptions = db(db.shift_candidate).select()
inscriptions
inscriptions[1].id
inscriptions.[1].auth_user
inscriptions.[1].auth_user.first_name
db.shift_candidate
db.shift_candidate.auth_user
db.shift_candidate.select(id=10)
db.shift_candidate.select()
db(db.shift_candidate).select(id=10)
    inscriptions = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == db.shift_candidate.auth_user)).select(orderby=db.shift.shift_date|db.shift.shift_time)
inscriptions = db((db.shift.id == db.shift_candidate.shift) & (db.auth_user.id == db.shift_candidate.auth_user)).select(orderby=db.shift.shift_date|db.shift.shift_time)
inscriptions
print inscriptions
inscriptions[1]
inscriptions[1].id
inscriptions[1].shift_candidate
inscriptions[1].shift_candidate.id
exit
exit()
users = db.auth_user
users = db(db.auth_user)
exit
exit()
db
users = db(auth_user).select()
users = db(auth_user)
users = db(db.auth_user).select()
users
users = db(db.auth_user).select()
exit
exit()
users = db().select(auth_user.ALL, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
users = db().select(db.auth_user.ALL, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
users
for user in users
for user in users:
  print user
users = db().select(db.auth_user.nombre, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
users = db().select(db.auth_user.username, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
for user in users:
  print user
users = db().select(db.auth_user.username, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id && db.auth_membership.user_id == None))
users = db().select(db.auth_user.username, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id) && db.auth_membership.user_id == None)
users = db().select(db.auth_user.username, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id) && (db.auth_membership.user_id==None))
users = db(db.auth_user.username!='28851724').select()
users
users = db(db.auth_membership.user_id==None).select(db.auth_user.username, db.auth_membership.ALL, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
users
for user in users:
  print user
users = db(db.auth_membership.user_id==None).select(db.auth_user.username, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
for user in users:
  print user
users = db(db.auth_membership.user_id==None).select(db.auth_user, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
users = db(db.auth_membership.user_id==None).select(db.auth_user.id,db.auth_user.username, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
for user in users:
  print user
users = db(db.auth_membership.user_id==None).select(db.auth_user.id,db.auth_user.username, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
for user in users:
  print user.id
users
users = db(db.auth_membership.user_id==None).select(db.auth_user.id,db.auth_user.username, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
users
for user in users:
  print user.username
exit()
users = db(db.auth_membership.user_id==None).select(db.auth_user.id,db.auth_user.username, left=db.auth_membership.on(db.auth_user.id==db.auth_membership.user_id))
for user in users:
  print user.username
users
exit()
users = db(db.auth_user).select()
users
users[2]
users[1]
users[1].inscription
users[1].inscription.id
aprobados = users = db(db.auth_user.inscription.id==db.psychological_interview.inscription.id).select()
aprobados = users = db(db.auth_user.id==db.inscription.auth_user & db.psychological_exam.id==db.inscription).select()
    inscriptions = db(db.inscription.id == db.psychological_interview.inscription.id).select()
inscriptions = db(db.inscription.id == db.psychological_interview.inscription.id).select()
inscriptions = db(db.inscription.id == db.psychological_interview.inscription).select()
inscriptions
inscriptions[1].auth_user
inscriptions[1]
inscriptions
inscriptions
inscriptions[1]
inscriptions
dict(insc = inscriptions)
insc
print insc
print inscriptions
inscriptions[1].inscription.auth_user
exit()
